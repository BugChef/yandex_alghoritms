"""
ID = 50512280

Написал комменты в коде про работу кода. Если вкратце, то сначала
распаковываем строки, а потом просто ищем префикс.

Функция распаковки работает за O(N^2) в худшем случае, например если
скобки стоят с краю, то сначала все элементы добавятся в стэк, а потом
в обратном проходе уберутся. Из памати функция использует стэк,
который занимает O(N) места.

Функция нахождения префикса работает за O(N*logN), где N это кол-во строк.
Дополнительную память функция не использует O(1).

В итоге получается, что при считывании N раз распаковываем строки и один раз
ищем префик, то есть в худшем случае будет N * O(N^2) + O(N*logN), из этого
получается O(N^3)
"""


# Превращает ЗС в нормальную строку
# 3[a]2[r2[t]] -> aaarttrtt
def unpack(string: str) -> str:
    stack = []
    # Проходимся по всем символам строки
    for char in string:
        # закидываем их на стэк
        stack.append(char)
        # ищем ] и начинаем разворачивать стэк до [
        if char == "]":
            res = []
            while stack.pop() != "[":
                if stack[-1] != "[":
                    res.insert(0, stack[-1])
            # в res лежат символы, заключенные между скобок
            # берем число и умножаем результат на него
            digit = int(stack.pop())
            stack += digit * res
    # Возвращаем стэк в виде строки
    return ''.join(stack)


# Ищет максимальный префикс массива строк
def max_prefix(strings) -> str:
    size = len(strings)

    # если строк нет, то и префикса нет
    if size == 0:
        return ""

    # если строка одна, то ее максимальный префикс это она сама
    if size == 1:
        return strings[0]

    # сортируем строки
    strings.sort()
    # выбираем минимальную длину между первой и последней строкой
    end = min(len(strings[0]), len(strings[-1]))

    # ищем префикс
    i = 0
    while i < end and strings[0][i] == strings[-1][i]:
        i += 1

    prefix = strings[0][0: i]
    return prefix


# Читаем данные
n = int(input())
unpacked = []
for _ in range(n):
    string = input()
    # распаковываем строки
    unpacked.append(unpack(string))
# ну и выводим результат
print(max_prefix(unpacked))
