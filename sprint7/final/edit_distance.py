"""
ID = 50194924

Решение такое:
Создаем массив dp размером 2 * len1, в нем буду хранить результат
текущей итерации и предыдущей, так как, чтобы посчитать i-ый ряд, мне
нужен только i-1ый.
Сначала выставляем значения для строк длиной 0,
так кол-во действий в них будет равно кол-ву символов 2ой строки.
Проходимся двойным циклом сравнивая символы между строками.
Дальше расписал в коде коменты, так наверно удобней.

Сложность алгоритма O(m*n), где m и n длины строк
Дополнительная память нужна только для хранения массива dp O(m)
"""


def min_dis(str1, str2):
    len1 = len(str1)
    len2 = len(str2)

    dp = [[0 for _ in range(len1 + 1)] for _ in range(2)]

    for i in range(0, len1 + 1):
        dp[0][i] = i

    for i in range(1, len2 + 1):
        for j in range(0, len1 + 1):

            # Если строка пустая, то нужно применить
            # операцию добавления i раз
            if j == 0:
                dp[i % 2][j] = i
            # Если символы в строках одинаковые, то
            # не нужно никаких операций, переносим результат
            elif str1[j - 1] == str2[i - 1]:
                dp[i % 2][j] = dp[(i - 1) % 2][j - 1]
            # Если символы отличаются, то просто берем
            # минимум из 3ех операций
            else:
                dp[i % 2][j] = (1 + min(dp[(i - 1) % 2][j], min(dp[i % 2][j - 1], dp[(i - 1) % 2][j - 1])))

    # проверяем длину строки на четность, чтобы
    # понять из какой взять результат
    return dp[len2 % 2][len1]


str1 = input()
str2 = input()

print(min_dis(str1, str2))
